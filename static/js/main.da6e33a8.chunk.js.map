{"version":3,"sources":["components/Form.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","getWeather","type","placeholder","name","Weather","className","tempreature","city","country","humidity","description","error","Api_Key","App","state","e","a","preventDefault","target","elements","value","fetch","api","json","data","setState","main","temp","sys","weather","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAWeA,EAVF,SAACC,GACV,OACI,uBAAMC,SAAUD,EAAME,WAAtB,UACI,uBAAOC,KAAK,OAAOC,YAAY,UAAUC,KAAK,SAC9C,uBAAOF,KAAK,OAAOC,YAAY,aAAaC,KAAK,YACjD,qDC4CGC,EAhDC,SAACN,GACb,OACI,sBAAKO,UAAU,OAAf,UAGQP,EAAMQ,aACN,oBAAGD,UAAU,WAAb,0BACI,uBAAMA,UAAU,aAAhB,cAA+BP,EAAMQ,YAArC,UAIJR,EAAMS,MACN,oBAAGF,UAAU,WAAb,mBACI,uBAAMA,UAAU,aAAhB,cAA+BP,EAAMS,KAArC,UAIJT,EAAMU,SACN,oBAAGH,UAAU,WAAb,sBACI,uBAAMA,UAAU,aAAhB,cAA+BP,EAAMU,QAArC,UAIJV,EAAMW,UACN,oBAAGJ,UAAU,WAAb,uBACI,uBAAMA,UAAU,aAAhB,cAA+BP,EAAMW,SAArC,UAIJX,EAAMY,aACN,oBAAGL,UAAU,WAAb,0BACI,uBAAMA,UAAU,aAAhB,cAA+BP,EAAMY,YAArC,UAIJZ,EAAMa,OACN,mBAAGN,UAAU,WAAb,SACI,uBAAMA,UAAU,aAAhB,cAA+BP,EAAMa,MAArC,aCnCdC,EAAU,mCA8DDC,E,4MA3DbC,MAAQ,CACNR,YAAY,GACZC,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAa,GACbC,MAAO,I,EAETX,W,uCAAa,WAAOe,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBAEIV,EAAOQ,EAAEG,OAAOC,SAASZ,KAAKa,MAC9BZ,EAAUO,EAAEG,OAAOC,SAASX,QAAQY,MAJ/B,SAKOC,MAAM,oDAAD,OAAqDd,EAArD,YAA6DC,EAA7D,kBAA8EI,IAL1F,cAKLU,EALK,gBAOQA,EAAIC,OAPZ,OAOLC,EAPK,OASPjB,GAAQC,EACV,EAAKiB,SAAS,CACZnB,YAAakB,EAAKE,KAAKC,KACvBpB,KAAMiB,EAAKrB,KACXK,QAASgB,EAAKI,IAAIpB,QAClBC,SAAUe,EAAKE,KAAKjB,SACpBC,YAAac,EAAKK,QAAQ,GAAGnB,YAC7BC,MAAO,KAGT,EAAKc,SAAS,CACZnB,YAAY,GACZC,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAa,GACbC,MAAO,sBAzBA,4C,kGA+Bb,WACE,OACE,qBAAKN,UAAU,UAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,cAAC,EAAD,CAAML,WAAY8B,KAAK9B,aAEvB,cAAC,EAAD,CACEM,YAAewB,KAAKhB,MAAMR,YAC1BC,KAAQuB,KAAKhB,MAAMP,KACnBC,QAAWsB,KAAKhB,MAAMN,QACtBC,SAAYqB,KAAKhB,MAAML,SACvBC,YAAeoB,KAAKhB,MAAMJ,YAC1BC,MAASmB,KAAKhB,MAAMH,iB,GApDdoB,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.da6e33a8.chunk.js","sourcesContent":["import React from 'react';\r\nconst Form = (props) => {    // just show\r\n    return ( \r\n        <form onSubmit={props.getWeather}>\r\n            <input type=\"text\" placeholder=\"City...\" name=\"city\" />\r\n            <input type=\"text\" placeholder=\"Country...\" name=\"country\" />\r\n            <button>Get Weather</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return ( \r\n        <div className=\"info\">\r\n\r\n            {\r\n                props.tempreature && \r\n                <p className=\"info-key\"> Tempreature: \r\n                    <span className=\"info-value\"> {props.tempreature} </span> \r\n                </p> \r\n            }\r\n            {\r\n                props.city && \r\n                <p className=\"info-key\"> City: \r\n                    <span className=\"info-value\"> {props.city} </span> \r\n                </p> \r\n            }\r\n            {\r\n                props.country && \r\n                <p className=\"info-key\"> Country: \r\n                    <span className=\"info-value\"> {props.country} </span> \r\n                </p> \r\n            }\r\n            {\r\n                props.humidity && \r\n                <p className=\"info-key\"> Humidity: \r\n                    <span className=\"info-value\"> {props.humidity} </span> \r\n                </p> \r\n            }\r\n            {\r\n                props.description && \r\n                <p className=\"info-key\"> Description: \r\n                    <span className=\"info-value\"> {props.description} </span> \r\n                </p> \r\n            }\r\n            {\r\n                props.error && \r\n                <p className=\"info-key\">  \r\n                    <span className=\"info-value\"> {props.error} </span> \r\n                </p> \r\n            }\r\n            \r\n            \r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Weather;","import React, { Component } from 'react';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst Api_Key = \"e68300f751fa5a7e964fd99bc51f02f9\";\n// http://api.openweathermap.org/data/2.5/weather?q=cairo%2Cegypt&appid=e36ed364400282e43250b6c4c0274d44\nclass App extends Component {\n  state = { \n    tempreature:'',\n    city:'',\n    country:'',\n    humidity:'',\n    description: '',\n    error: ''\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`);\n\n    const data = await api.json();\n    \n    if (city && country) {  // in case there city and country\n      this.setState({\n        tempreature: data.main.temp,\n        city: data.name,\n        country: data.sys.country ,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: ''\n      })\n    } else {\n      this.setState({\n        tempreature:'',\n        city:'',\n        country:'',\n        humidity:'',\n        description: '',\n        error: 'Please Enter Data' \n      })\n    }\n    \n\n  }\n  render() { \n    return ( \n      <div className=\"wrapper\">\n        <div className=\"form-container\"> \n          <Form getWeather={this.getWeather}/>\n\n          <Weather \n            tempreature = {this.state.tempreature}\n            city = {this.state.city}\n            country = {this.state.country}\n            humidity = {this.state.humidity}\n            description = {this.state.description}\n            error = {this.state.error}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}